buildscript {
    apply from: rootProject.file('versions.gradle')
}

plugins {
    id 'java'
    id "org.jetbrains.kotlin.jvm" version "1.3.61"
    id "com.jfrog.bintray" version "1.8.4"
}

apply plugin: 'maven'
apply plugin: 'maven-publish'

group 'net.time4tea'
version = project.hasProperty('releaseVersion') ? project.releaseVersion : 'LOCAL'

description = 'Java/Kotlin Interface to Intel Open Image Denoise - OIDN - library'

sourceCompatibility = 1.8

def headless = System.getenv("DISPLAY") == null

repositories {
    mavenCentral()
}

dependencies {
    project(":oidnjni")
    implementation kotlin
    testImplementation testing
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

/* generate headers to look at, not used for code gen */
task javah(type: Exec) {
    def classpath = sourceSets.main.output.classesDirs.join(File.pathSeparator)
    println(classpath)
    commandLine "javah", "-classpath", classpath, "-d", "$buildDir/generated/jni", "net.time4tea.oidn.Oidn", "net.time4tea.oidn.OidnDevice", "net.time4tea.oidn.OidnFilter"
    dependsOn classes
}

clean.dependsOn(":oidnjni:makeClean")

ext.libraries = file("$buildDir/generated/libraries")

task copyLibraries(type: Copy) {
    dependsOn ":oidnjni:make"
    def oidnjni = project(":oidnjni")
    def jni_lib = oidnjni.ext.jni_lib
    from oidnjni.ext.oidn_libs, "${oidnjni.buildDir}/${jni_lib}"
    include "*.so"
    include "libtbb.so.*"
    include "libtbbmalloc.so.*"
    into libraries
}

test {
    outputs.upToDateWhen {false}
    useJUnitPlatform()
    jvmArgs = headless ? [ "-Djava.awt.headless=true"] : []
}

sourceSets {
    main {
        resources {
            srcDirs "src/main/resources", libraries
        }
    }
}

compileJava.dependsOn  copyLibraries
clean.dependsOn  ':oidnjni:makeClean'

archivesBaseName = "oidnjni"

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
    exclude "**/*.so", "**/*.so.*"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            mavenJava(MavenPublication) {
                artifactId = archivesBaseName

                pom.withXml {
                    asNode().appendNode('name', archivesBaseName)
                    asNode().appendNode('description', description)
                    asNode().appendNode('url', 'https://github.com/time4tea/oidnjni')
                    asNode().appendNode('developers')
                            .appendNode('developer').appendNode('name', 'James Richardson').parent().appendNode('email', 'james@time4tea.net')
                    asNode().appendNode('scm').
                            appendNode('url', 'git@github.com:time4tea/' + archivesBaseName + '.git').parent().
                            appendNode('connection', 'scm:git:git@github.com:time4tea/' + archivesBaseName + '.git').parent().
                            appendNode('developerConnection', 'scm:git:git@github.com:time4tea/' + archivesBaseName + '.git')
                    asNode().appendNode('licenses').appendNode('license').
                            appendNode('name', 'Apache License, Version 2.0').parent().
                            appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.html')
                }
                from components.java

                artifact sourcesJar
                artifact javadocJar
            }
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_API_KEY')

    publications = ['mavenJava']
    dryRun = false
    publish = true
    pkg {
        repo = 'oss'
        userOrg = 'time4tea'
        name = "oidnjni"

        desc = description
        websiteUrl = 'https://github.com/time4tea/oidnjni'
        issueTrackerUrl = 'https://github.com/time4tea/oidnjni/issues'
        vcsUrl = 'https://github.com/time4tea/oidnjni.git'
        licenses = ['Apache-2.0']
        labels = []
        publicDownloadNumbers = true
        version {
            name = project.version
            vcsTag = project.version
            gpg {
                sign = true
                passphrase = System.getenv("BINTRAY_GPG_PASSPHRASE")
            }
            mavenCentralSync {
                sync = false
                user = System.getenv('SONATYPE_USER')
                password = System.getenv('SONATYPE_PASSWORD')
                close = '1'
            }
        }
    }
}
